import { Component, OnInit } from '@angular/core';
import { ColDef } from 'ag-grid-community';
import { VulnerabilityService } from '../../services/vulnerability.service';
import * as XLSX from 'xlsx';

@Component({
  selector: 'app-batch-vulnerability',
  templateUrl: './batch-vulnerability.component.html',
  styleUrls: ['./batch-vulnerability.component.scss']
})
export class BatchVulnerabilityComponent implements OnInit {

  minDate: Date;
  maxDate: Date;
  isDateLoaded: boolean = false;
  loading: boolean = false;
  months: object = {
    'Jan': "01",
    'Feb': "02",
    'Mar': "03",
    'Apr': "04",
    'May': "05",
    'Jun': "06",
    'Jul': "07",
    'Aug': "08",
    'Sep': "09",
    'Oct': "10",
    'Nov': "11",
    'Dec': "12"
  }
  start_date: string = "";
  end_date: string = "";


  constructor(private reportsService: VulnerabilityService) { 
    const today = new Date();
    this.minDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
    this.maxDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
  }

  ngOnInit(): void {
  }

  columnDefs: ColDef[] = [
    {field: 'Host/System Name' , filter: 'host name', wrapText:true, pinned: 'left', width:250},
    {field: 'Security owner in IBM Inventory', filter: 'owner', wrapText:true, pinned: 'left' , width:250},
    { field: 'Squad Name', filter: 'squad name', width:150  },
    { field: 'Vulnerabilities found by IBM Inventory', filter: 'vulnerability_count', width:150  },
    // { field: 'Do Overdue Vulnerabilities Exist?', filter: 'isVulnerability', width:150  },
    // { field: 'Days left to Fix Vulnerability', filter: 'vulnerability_days_left', width:150  },
    { field: 'Overdue Vulnerability Severity Details', filter: 'overdue_vulnerability_severity', width:150  },
    { field: 'Timestamp (UTC)', filter: 'Timestamp', autoHeight:true, width:220 }
  ]
  rowData = [];

  dbColumns_to_uiColumns = {
    "hostname": "Host/System Name",
    "security_owner": "Security owner in IBM Inventory",
    "squad_name": "Squad Name",
    "vulnerability_count": "Vulnerabilities found by IBM Inventory",
    // "vulnerability_overdue": "Do Overdue Vulnerabilities Exist?",
    // "vulnerability_days_left": "Days left to Fix Vulnerability",
    "overdue_vulnerability_severity": "Overdue Vulnerability Severity Details",
    "timestamp": "Timestamp (UTC)"
  }





  formDate(timestamp:any){
    let date = timestamp.split(" ")[2]
    let month = this.months[timestamp.split(" ")[1]]
    let year = timestamp.split(" ")[3]

    return `${year}-${month}-${date}`;

  }


  clickme(){

    if (this.start_date && this.end_date){
      let start = this.formDate(this.start_date.toString());
      let end = this.formDate(this.end_date.toString());

      this.loading = true;
      this.reportsService.getVulnerabilityOverdueData(start,end).subscribe((result) =>{
        if (result) {
          let dummyRowData = []
          result['message'].forEach(element => {
            let columnDisplay = {}

            columnDisplay[this.dbColumns_to_uiColumns['hostname']] = element['hostname']
            columnDisplay[this.dbColumns_to_uiColumns['security_owner']] = element['security_owner']
            columnDisplay[this.dbColumns_to_uiColumns['squad_name']] = element['squad_name']
            columnDisplay[this.dbColumns_to_uiColumns['vulnerability_count']] = element['vulnerability_count']
            // columnDisplay[this.dbColumns_to_uiColumns['vulnerability_overdue']] = element['vulnerability_overdue']
            // columnDisplay[this.dbColumns_to_uiColumns['vulnerability_days_left']] = element['vulnerability_days_left']
            columnDisplay[this.dbColumns_to_uiColumns['overdue_vulnerability_severity']] = element['overdue_vulnerability_severity']
            columnDisplay[this.dbColumns_to_uiColumns['timestamp']] = element['timestamp']

            dummyRowData.push(columnDisplay)
          });
          
          this.rowData = dummyRowData;
          this.isDateLoaded = true;
          this.loading = false;
        }
      })
    } else {
      console.log("Please select the start and end date both")
    }
    
  }

  exportExcel(){

    let filename = `Overdue_${this.formDate(this.start_date.toString())}_${this.formDate(this.end_date.toString())}.xlsx`

    const ws: XLSX.WorkSheet =XLSX.utils.json_to_sheet(this.rowData);

    /* generate workbook and add the worksheet */
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'OverdueVulnerability');

    /* save to file */
    XLSX.writeFile(wb, filename);
  }


}
